// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String?        // Hashed password (null if using OAuth)
  role          UserRole       @default(TEAM_MEMBER)
  avatar        String?        // URL to avatar image
  timezone      String?        @default("UTC")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdProjects Project[]    @relation("CreatedBy")
  createdTeams  Team[]         @relation("TeamCreatedBy")
  createdCeremonies Ceremony[] @relation("CeremonyCreatedBy")
  createdPrompts Prompt[]      @relation("PromptCreatedBy")
  teamMembers   TeamMember[]
  responses     Response[]
  feedback      Feedback[]
}

enum UserRole {
  ADMIN
  SCRUM_MASTER
  TEAM_MEMBER
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime
  progress    Int           @default(0) // 0-100
  createdBy   User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectTeams ProjectTeam[]
  prompts     Prompt[]
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
}

model Team {
  id          String       @id @default(uuid())
  name        String
  description String
  createdBy   User         @relation("TeamCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  projectTeams ProjectTeam[]
  prompts     Prompt[]
}

model TeamMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      String
  joinedAt  DateTime @default(now())

  @@unique([userId, teamId])
}

model ProjectTeam {
  id         String   @id @default(uuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  assignedAt DateTime @default(now())

  @@unique([projectId, teamId])
}

model Ceremony {
  id          String   @id @default(uuid())
  name        String
  description String
  duration    Int      // minutes
  frequency   String
  color       String
  createdBy   User     @relation("CeremonyCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prompts     Prompt[]
}

model Prompt {
  id          String       @id @default(uuid())
  title       String
  description String
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String
  team        Team         @relation(fields: [teamId], references: [id])
  teamId      String
  ceremony    Ceremony     @relation(fields: [ceremonyId], references: [id])
  ceremonyId  String
  deadline    DateTime
  status      PromptStatus @default(PENDING)
  videoUrl    String?
  createdBy   User         @relation("PromptCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  responses   Response[]
}

enum PromptStatus {
  PENDING
  IN_PROGRESS
  NEAR_DEADLINE
  OVERDUE
  COMPLETE
}

model Response {
  id            String    @id @default(uuid())
  prompt        Prompt    @relation(fields: [promptId], references: [id])
  promptId      String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  textResponse  String?
  videoResponse String?
  submittedAt   DateTime  @default(now())
  feedback      Feedback[]

  @@unique([promptId, userId])
}

model Feedback {
  id         String   @id @default(uuid())
  response   Response @relation(fields: [responseId], references: [id])
  responseId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  text       String
  createdAt  DateTime @default(now())
}
